1. 在安装完成 Git 后，开始正式使用前，是需要有一些全局设置的，如用户名、邮箱。
    git config --global user.name "your name"      // 设置全局用户名
    git config --global user.email "your email"    // 设置邮箱
2. 除了用户名、邮箱之外，还有很多的配置可以用来自定义 Git，如：
    git config --global color.ui true        // 让 Git 显示不同的颜色
    git config core.ignorecase true            // 让 Git 对仓库中的文件大小写敏感
3. 查看所有的已经做出的配置：
    git config -l


配置完成之后，开始新建仓库了。

1. 创建 Git 版本库 git init
2. 将文件添加到版本库  tips：这边空文件夹是不会被添加到暂存区中的
    git add Readme.md        // 添加单个文件到暂存区
    git add .                // 将当前目录下所有修改添加到暂存区，除按照规则忽略的之外
    
3.将暂存区中的文件，提交到仓库中。需要使用 git commit：    
    git commit        // 如果暂存区有文件，则将其中的文件提交到仓库
    git commit -m 'your comments'         // 带评论提交，用于说明提交内容、变更、作用等
    
 4. 查看仓库的状态    git status
 
 
 5.查看仓库中的具体修改
 
    git diff    // 查看版本库中所有的改动
    git diff Readme.md        // 查看具体文件的改动
    
 6.查看提交历史记录
 
    git log     // 显示所有提交的历史记录
    git log --pretty=oneline    // 单行显示提交历史记录的内容
    
  7.版本回退

    git reset --hard HEAD^        // 回退到上一个提交版本
    git reset --hard HEAD^^        // 回退到上上一个提交版本
    git reset --hard 'commit_id'    // 会退到 commit_id 指定的提交版本
    
    8. 撤销修改
    
      git checkout -- Readme.md    // 如果 Readme.md 文件在工作区，则丢弃其修改
      git checkout -- .            // 丢弃当前目录下所有工作区中文件的修改
      
      
   9. 删除文件
   
   git rm Readme.md // 删除已经被提交过的 Readme.md
   
   
   建成了仓库之后，就需要做分支管理了。
   
   1. 查看分支
   
    git branch        // 查看本地分支信息
    git branch -v     // 查看相对详细的本地分支信息
    git branch -av     // 查看包括远程仓库在内的分支信息
    
    
  2. 创建分支
  git branch dev // 新建一个名称为 dev 的分支
  
  3. 切换分支     
   git checkout dev // 新建完 dev 分支以后，通过该命令切换到 dev 分支
  
  4. 创建并切换分支
  
  git checkout -b dev // 新建 dev 分支，并切换到该分支上
  
  5. 合并分支
  
  git checkout master        // 切换回 master 分支
  git merge dev            // 将 dev 分钟中的修改合并回 master 分支
  
  6. 删除分支
  
  git branch -d dev // 删除 dev 分支
  
  
  操作远程仓库
  
  1. 从远程仓库克隆
     git clone https://github.com/git/git.git     // 通过 https 协议，克隆 Github 上 git 仓库的源码
    git clone linfuyan@github.com/git/git.git    // 通过 ssh 协议，克隆 Github 上 git 仓库的源码
    
 2. 添加远程仓库
 
 git remote add origin your_remote_git_repo // 为本地仓库添加远程仓库
 
 
 3. 推送本地的内容到远程仓库
 
  git push -u origin master // 第一次推送时使用，可以简化后面的推送或者拉取命令使用
  git push origin master    // 将本地 master 分支推送到 origin 远程分支
  
  
 4. 从远程仓库获取最新内容
 
   git fetch origin master    
   git pull origin master
   
   git fetch 和 git pull 之间的区别：

    git fetch 是仅仅获取远程仓库的更新内容，并不会自动做合并。
    git pull 在获取远程仓库的内容后，会自动做合并，可以看成 git fetch 之后 git merge。
    注意：建议多使用 git fetch。
    
  5. 查看远程仓库信息
  
  git remote [-v] // 显示远程仓库信息
