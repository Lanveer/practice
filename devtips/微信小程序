
最近连续做了两个微信小程序，之前断断续续的也做过一些，很多的api组件都是摸着石头过河，边查看文档边做，满满的熟悉了，最近小程序的版本更新较快，很多的
api之前都没有用到，还有一些，虽然之前版本就有的，但是较新版本而言，变化不少，很多在以前项目中没有问题的东西到了现在这个版本就没有办法使用了，或多或少
出现一些问题，下面，我就对最近一段时间使用小程序做一个总结，将在项目中遇到的问题罗列出来，供后面需要的时候查询。


<!--垂直滚动，这里必须设置高度-->
<scroll-view scroll-y="true" style="height: 200px">
 <view style="background: red; width: 100px; height: 100px" ></view>
 <view style="background: green; width: 100px; height: 100px"></view>
 <view style="background: blue; width: 100px; height: 100px"></view>
 <view style="background: yellow; width: 100px; height: 100px"></view>
</scroll-view>
 
<!-- white-space
 normal: 正常无变化(默认处理方式.文本自动处理换行.假如抵达容器边界内容会转到下一行)
 pre: 保持HTML源代码的空格与换行,等同与pre标签
 nowrap: 强制文本在一行,除非遇到br换行标签
 pre-wrap: 同pre属性,但是遇到超出容器范围的时候会自动换行
 pre-line: 同pre属性,但是遇到连续空格会被看作一个空格
 inherit: 继承
-->
<!--水平滚动-->
<scroll-view scroll-x="true" style=" white-space: nowrap; display: flex" >
<!-- display: inline-block-->
 <view style="background: red; width: 200px; height: 100px; display: inline-block" ></view>
 <view style="background: green; width: 200px; height: 100px; display: inline-block"></view>
 <view style="background: blue; width: 200px; height: 100px; display: inline-block"></view>
 <view style="background: yellow; width: 200px; height: 100px; display: inline-block"></view>
</scroll-view>



2. 参数的传递问题
 bindViewTap: function() {
    wx.navigateTo({
      url: '../logs/logs?name=hello' 
    })
  },
  
  接收：
    onLoad: function (query) {
    this.setData({
      nickname:query.name
    });
  }
  
  3. 获取小程序唯一的openid
  
  第一步： 通过login函数获取code
  第二部：通过wx.request请求
                  var l='https://api.weixin.qq.com/sns/jscode2session?appid='+d.appid+'&secret='+d.secret+'&
                  js_code='+res.code+'&grant_type=authorization_code';  
                  
                  在回调函数里面获取到openid 
                  
                  
  4.在app里面定义函数，然后在其他页面需要的时候调用。
  
  eg： function test（arguments){
   console.log(arguments)
   }
   
  在其他地方调用的时候，需要引用app，然后调用函数  app.test(xxxx)
  这样的话就能调用
  
  
  5.在小程序里面使用switch函数，
  
  
  6.小程序解析富文本的问题
  
  
  
  7. 小程序的我视频播放问题\
  
  
  8.在小程序使用switch 语句块的时候，如果switch里面参数是数字的话需要转化为parseInt（）类型才能进行执行，不然的话是执行不下去的。
  
  
  9.小程序通过缓存实现搜索或者历史记录的展示功能
    tips：入股是做搜索历史记录的话，就需要在搜索成功的回调函数里面去做，便于取得成功的值，如果是浏览记录的话，就在浏览页被加载的时候做。
   var histoty = [];
          var x = wx.getStorageSync('histoty'); // 取出缓存数据
          if (x == '') {
            var x = [];
            var ky = that.data.inputValue;
            x.push(ky);
            wx.setStorageSync('histoty', x);  // 判断缓存数据为空的情况，新增加缓存
          } else {
            x.push(that.data.inputValue);
            wx.setStorageSync('histoty', x);   // 如果缓存数据不为空的话，将现在的数据pus到以前的，并存到缓存里面。
          }
          
          
 10. 小程序处理字符串问题
 
 有时候在列表中需要对过于长的字符串进行截取处理，但是由不能直接在{{}}中进行运算，所以只有在成功回调函数中循环需要截取的这个字符串
 
    for (var i = 0; i < that.data.productList.length; i++) {
            var obj = {};
            var str = that.data.productList[i].goods_name;
            var key = 'productList[' + i + '].goods_name';
            if (str.length > 6) {
              str = str.substr(0, 6) + "...";
            }
            obj[key] = str;
            that.setData(obj)
          }
          
          
         通过这样的方法，就能将这个截取后的字符串放到原来返回值的数组里面去了，关键点是这里的 var key = 'productList[' + i + '].goods_name';
         一定要和原来的数组返回值保持一致，不然的在data中就出现了两个不同的值。
         
         
         
11.小程序实现点击列表跳转详情的时候通过缓存实现

接口在请求列表的时候就已经将详情的数据同时返回过来了，点击列表的时候就不需要通过再次请求详情的接口，只需要在获取列表的时候就将整个返回的list的数据
setData({})到data中去， 然后在点击列表的时候获取其中点击列表的下标，然后获取data[下标]取得列表对应的详情页面内容，然后 缓存起来，在点击的时候就
把这个数据写进缓存，然后那边详情页面在加载的时候就取出缓存

    var idx = e.currentTarget.dataset.index;  获取当钱点击的下标
    
   <view class='list' bindtap='productHref' wx:for='{{productList}}' data-index="{{index}}"> wxml中的写法



12.  小程序实现照片上传

  chooseImageTap1: function () {
    var that = this;
    wx.showActionSheet({
      itemList: ['从相册中选择', '拍照'],
      itemColor: "#f7982a",
      success: function (res) {
        if (!res.cancel) {
          if (res.tapIndex == 0) {
            that.chooseWxImage1('album')
          } else if (res.tapIndex == 1) {
            that.chooseWxImage1('camera')
          }
        }
      }
    })
  },
  chooseWxImage1: function (type) {
    let that = this;
    wx.chooseImage({
      sizeType: ['original', 'compressed'],
      sourceType: [type],
      success: function (res) {
        that.setData({
          enterPrice: res.tempFilePaths[0],
        })
        // 文件上传
        var file = res.tempFilePaths[0]
        wx.uploadFile({
          url: app.globalData.host + 'v2/wechat.user/upload',
          filePath: file,
          header: { "Content-Type": "application/x-www-form-urlencoded" },
          name: 'file',
          formData: {
            'token': that.data.userInfo.token,
            'file': file
          },
          success: function (res) {
            var obj = JSON.parse(res.data);
            console.log(obj.data.url)
            that.setData({
              companyLicenceUrl: obj.data.url
            })
          }
        })
      }
    })
  },
  
  
  13. 小程序实现动态添加元素
  
  <button bindtap="insert">增加按钮</button>
<view wx:for="{{checkbox}}">
    <checkbox>checkbox</checkbox>
</view>


Page({
  data:{
    checkbox: [],
  },
  insert: function() {
    var cb = this.data.checkbox;
    cb.push(this.data.checkbox.length);
    this.setData({
      checkbox: cb
    });
  }
})

总结：在这里，checkbox是通过循环出来的，这边按上绑定了点击事件，首先获得现在存在的个数所属的数组，然后将长度push进这个数组





15.小程序实现当前元素高亮状态

微信小程序有个属性hover-class='active',是指当点击列表元素时当按下鼠标左键会显示active样式,但是鼠标离开样式就会复原.可以参考以下解决方案,
直接上代码
<view class="taga">
 <view class="tag-title">标签</view>
 <view class="tag-box">
 <view wx:for="{{taga}}" wx:key="id" wx:for-index="i">
 <view class="taga-item {{currentItem==item.id?'active-tag':''}}" data-id="{{item.id}}" bindtap="tagChoose">{{item.name}}</view>
 </view>
 </view>
 
 
 js代码
    tagChoose:function(options){
   var that = this
   var id = options.currentTarget.dataset.id;
   console.log(id)
   //设置当前样式
   that.setData({
   'currentItem':id
   })
   }



