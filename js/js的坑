
1. 排序，一般我们会使用js的sort方法给数组排序，但是sort在默认的情况下使用字母数字来排序，也就是Unicode编码，所以就会出现一个坑。
var a=[1,10,2,5];
var b= a.sort();
console.log(b)    //[1, 10, 2, 5]

结果既然是这样。那么要正确输出的话，我们必须这么做。
var a=[1,10,2,9,3,4,8];
var b= a.sort(function(a,b){return a-b});
console.log(b)  //[1, 2, 3, 4, 8, 9, 10]
我们必须从新定义sort方法。

es6的箭头函数
var a=[1,10,2,9,3,4,8];
var b= a.sort((a,b)=> a-b);
console.log(b) // [1, 2, 3, 4, 8, 9, 10]


2. replace 的使用， replace在使用的时候是可以替换的，但是它不能替换整体或者多个，默认情况下，replace只会替换掉第一个，如果想要全局替换的话，就需要使用
replace(/b/g,'hhh'),这样的话所有的b字符都会被替换成hhh。


3.js比较运算符需要注意的。
'abc'==='abc'   // true
1===1     // true
[1,2,3]===[1,2,3]  // false
{a:1}==={a:1}   // false
{}==={}   //flase
原因是数组和对象是两个独立的，他们只是恰好包含了相同的值，但是却具有不同的引用，因此从根源来看是不相同的。


4. 闭包函数, 看下面的函数， 我们想要得到的结果是依次打印出来的结果是123...可是不管怎么都是10 
 var arr=[];
  for(var i=0; i< 10; i++){
arr.push( function(){
console.log(i)
})
}

arr[0]()  //10
arr[1]()  //10

改写1：  var arr=[];
  for(let i=0;i<10;i++){
  arr.push(function(){
  console.log(i)
  })
  }
 
  arr[0]()   //0
  arr[1]()  //1
  
 原因是： let和var的不同点在于作用域， var的作用域是最近的函数块，而let的作用域是最近的封闭块，封闭块可以小于函数块
 
 改写2：
 var arr=[];
  for(var i=0; i<10; i++){
  arr.push(console.log.bind(null,i))
  }

arr[0]()  //    0
arr[8]()    //8



