函数在js里面算是一等公民了，最重要的也就是函数，函数在js里面比较随性，有众多的展示方法，与函数密集相关的就是函数的作用域了，作用域又分为全局作用域和
局部作用域，其间又存在着千丝万缕的联系，提到作用域，那么必不可谈的就是函数的闭包了。其中用就是为了解决作用域问题的。


简明的概念： 当一个函数里面嵌套另一个函数的时候，内部的函数可以访问外部函数里面的变量的时候，那么这个时候就可以称作为是闭包函数。

正常的函数都有自己的作用域，

        1.外部变量的作用域：
        var a=1;

        function test(){
        console.log(a)
        };
        test();  //1
        像这样的函数，在函数的外部声明了一个变量，然后在函数内部去调用这个变量，是可以获取到的。也就是说，函数外声明的变量在函数内部是可以调用到的。
        
        2.内部变量的作用域
        
        var a=0
        function test(){
        var a=12;
        }
        test()
        console.log(a)  //0
        
        在这个函数中，声明了两个变量，一个在函数外面，一个在函数里面，最后打印的结果是获得了在函数外面的变量，里面的变量是没有办法获得的
       
        
        3.错误实例
        
        function test(){
          var b=12;
          }
          test()
          console.log(b)  //  b is not defined
          
          在这里就展示了函数内部的变量是无法再函数外面调用的，如果需要的话应该怎么办，就只能说到下面的闭包了。
          

    
       
        总结：函数内部声明的变量在函数外面是不可见的，函数外部声明的变量在函数体内是可见的，如果我们想在函数外部使用里面的变量，怎么办？通过上面的
        例子，我们知道是会报错的，那要怎么解决呢，函数的return是可以将函数内部的值return出来的.
        
        eg:
        function test(){
          var b=12;
          return function(){
          console.log(b)
          }
          }
          var get_b=test()()  //12
          
          通过这样的话，我们在函数的外部只需要调用就可以拿到函数内部的变量了，这就是闭包。
          
          
          
          
          
          顺便说一个题外话：
          
          上次去面试的时候也问到了关于闭包的知识，当时以为是自己弄错了，回来仔细想了一下发现不对，是面试官弄错了，当时考察的函数是这样的
          
           var a=2;
           function add(){
           var b=4;
           return function(){
           console.log(b)
           }
           }
           
           add()()  //  打印的结果应该是4
           
           
          我说了是4，但是当时面试官漏出了奇怪的表情，他说你回去好好看看吧，由于面试有点紧张，所以也就没有多想，以为自己错了，回家想了一下这个事情
          我的结果是对的，这里定义了两个变量，一个内部变量一个外部变量，这里return出去的是一个函数，也就构成了所谓的闭包，闭包的主要优势就是外部
          函数可以访问内部变量，这里return出去的是一个整块函数，里面就是可以拿到他外面一个作用域下面的变量的，所以在外面就能够拿到b=4的变量。
          
          
        
        
        
        
        
        
