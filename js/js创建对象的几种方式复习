
（1）Object构造函数和对象字面量
在早期js开发中，很多开发者会使用Object构造函数的方式来创建一个对象，通过调用Object构造函数new一个Object对象，然后再给这个对象的每一个属性和方法进行
赋值，代码如下所示：
var person = new Object();
person.age = 22;
person.name = 'Dolanf';
person.code = function() {
  console.log(‘hello world！’);
};

（2）工厂模式
工厂模式通过将对象的创建封装到一个方法中，再通过在调用该方法时传入参数而实现对象的实例化，解决了以上提到的产生大量重复代码的问题，如下所示：


function createPerson(age, name) { 
    var o = new Object();
    o.age = age;
    o.name = name;
    o.code = function() {
         console.log('hello world!');
    };

    return o;
}

var person1 = createPerson(11, '小白');
var person2 = createPerson(12, '小黑');

（3）构造函数模式
构造函数模式就是通过定义一个function函数，然后通过this给对象的属性和方法进行赋值。当我们实例化对象时，只需在该函数前面加一个new关键字就可以了。

JavaScript

function Person(age, name) { 
    this.age = age;
    this.name = name;
    this.code = function() {
         console.log('hello world!');
    };
}

var person1 = new Person(11, '小白');
var person2 = new Person(12, '小黑');
