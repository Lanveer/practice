在angular中如何获取input以及textarea等的焦点，就是在输入之后，不需要点击操作就能执行某一些方法，这样的话只有指令才能做到了，下面就讲解一下ng的自定义
指令。


<div ng-app="myApp" ng-controller="control">
  <input type="text" set-Focus ng-blur="setBlur()">
  <button ng-click="getFocus()">点击</button>
 </div> 
 
 <script type="text/javascript">  
 //模型
 var app = angular.module('myApp',[]);
 
 //控制器
 app.controller("control",function($scope){
  $scope.isCome = false;  
  $scope.isFocus = false;  
 
  $scope.getFocus = function(){
   $scope.isFocus = true; 
   $scope.isCome = true; 
  };
 
  $scope.setBlur = function(){
   $scope.isFocus = false;
  }
 });
 
 //自定义指令
  app.directive('setFocus',[ function(){
   return {
    scope:false,
    link:function(scope, element){      
     scope.$watch("isFocus",function(newValue,oldValue, scope) {
      //如果有新的输入
      if(newValue && scope.isCome){
       element[0].focus(); //获取焦点
      }
    }, true);;
    }
   };
 }]);
 
</script>


同时可以使用自定义指令来实现输入的格式化

.directive('textTransform', function() {
   var transformConfig = {
     uppercase: function(input){
       return input.toUpperCase();
     },
     capitalize: function(input){
       return input.replace(
         /([a-zA-Z])([a-zA-Z]*)/gi,
         function(matched, $1, $2){
          return $1.toUpperCase() + $2;
        });
     },
     lowercase: function(input){
       return input.toLowerCase();
     }
   };
  return {
    require: 'ngModel',
    link: function(scope, element, iAttrs, modelCtrl) {
      var transform = transformConfig[iAttrs.textTransform];
      if(transform){
        modelCtrl.$parsers.push(function(input) {
          return transform(input || "");
        }); 
        element.css("text-transform", iAttrs.textTransform);
      }
    }
  };
});


在页面上就可以这样使用了
<input type="text" ng-model="demo.text" text-transform="capitalize" />
<input type="text" ng-model="demo.text" text-transform="uppercase" />
<input type="text" ng-model="demo.text" text-transform="lowercase" />








