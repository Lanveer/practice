
var koa = require('koa');
var app = koa();

app.use(function* f1(next) {
    console.log('f1: pre next');
    yield next;
    console.log('f1: post next');
});

app.use(function* f2(next) {
    console.log('  f2: pre next');
    yield next;
    console.log('  f2: post next');
});

app.use(function* f3(next) {
    console.log('    f3: pre next');
    this.body = 'hello world';
    console.log('    f3: post next');
});

app.listen(4000);

执行结果：
f1: pre next
  f2: pre next
    f3: pre next
    f3: post next
  f2: post next
f1: post next


模拟：
function* f1() {
    console.log('f1: pre next');
    yield f2;
    console.log('f1: post next');
}

function* f2() {
    console.log('  f2: pre next');
    yield f3;
    console.log('  f2: post next');
}

function* f3() {
    console.log('    f3: pre next');
    console.log('    f3: post next');
}

var g = f1();
g.next();
g.next();

输出结果：
f1: pre next
f1: post next

四种不同情况的调用
function* outer() {
    console.log('outer: pre yield');
    // 1. yield* inner();
    // 2. yield* inner;
    // 3. yield inner();
    // 4. yield inner;
    console.log('outer: after yield');
}

function* inner() {
    console.log('inner');
}


解释：
yield* inner()：相当于用inner的内容来替换该位置，不会消耗一次next()调用，inner内的代码会被执行
yield* inner：报错。因为inner是一个generator function，而yield*后面应该是一个igenerator
yield inner()：yield的结果是一个generator，消耗一次outer的next()调用，且inner内的代码不会被执行
yield inner：yield的结果是一个generator function，消耗一次outer的next()调用，且inner内的代码不会被执行


