
1. 最原始的继承
  
  一个狗类的构造函数
  function Dog(){
  this.name = name
  }
  
  通过使用new 关键字就可以生成一个狗对象的实例
  var dog1= new Dog('zhangsan');
  
  这样的使用构造函数生成实例有一个弊端就是实例之间无法共享属性和方法
  　function DOG(name){
　　　　this.name = name;
　　　　this.species = '犬科';
　　}
  生成了两个实例对象
    var dogA = new DOG('大毛');
　　var dogB = new DOG('二毛');
  这两个对象的species属性是独立的，修改其中一个，不会影响到另一个。
  　dogA.species = '猫科';
　　alert(dogB.species); // 显示"犬科"，不受dogA的影响  这样的话就是资源的极大浪费
  
2. 为了解决这样的资源浪费问题，于是就引入了prototype
  function Dog(){
  this.name=name
  }
  Dog.prototype={species:'dogs'}
  var dog1= new Dog('zhangsan');
  var dog2=new Dog('lisi');
  console.log(dog1.species)  // dog
  console.log(dog2.species)  // dog
  
  经过修改的话：
  Dog.prototype.species='cat'
  console.log(dog1.species)  // cat
  console.log(dog2.species)  // cat
  
  由于所有的实例对象共享同一个prototype对象，那么从外界看起来，prototype对象就好像是实例对象的原型，而实例对象则好像"继承"了prototype对象一样。
