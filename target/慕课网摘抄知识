1.请求

首先一个请求，包含有请求头，请求行，请求正文。具体是怎样境，看下面的代码

axios({
 method: 'post',
 url: '/user/12345',
 headers:{
 'Content-Type':'application/x-www-form-urlencoded'
 },
 data: {
 firstName: 'Fred',
 lastName: 'Flintstone'
 }
});


如上所述

method和 url就是这个请求的请求行（这里是请求行部分信息，其实请求行还包括http协议的版本等信息）。 headers中的属性就是请求头，里面的属性，
全部包含在请求的header里面，是服务端获取客户端版本，缓存等信息的一个途径。 data对应的就是请求正文，也就是平常所说的参数。


2-2.响应

在请求发出去，并且响应已经回来的时候，就时候信息可分为响应行，响应头，响应正文。

响应行
引用看云的一个请求作为实例，如下代码就是这个请求的响应行，返回请求的http协议及版本，状态码，请求状态等描述信息。

Request URL:https://www.kancloud.cn/yunye/axios/comment?article_id=234845&page=1
Request Method:GET
Status Code:200 OK
Remote Address:117.23.61.221:443
响应头

响应头和请求头格式一致，返回版本，缓存等信息。



响应正文

平常接触最多的就是响应正文，也就是日常开发需要用到的数据。开发者拿到这些数据之后，再进行相应的处理。


2-3.关于https

关于 https 。下面可以先了解下 http 的缺点，https就是http基础上做的加密处理。

1.通信使用明文不加密，内容可能被窃听 
2.不验证通信方身份，可能遭到伪装 
3.无法验证报文完整性，可能被篡改


2.响应时候的状态码

 200	请求成功
 400	参数错误
 403	拒绝或者禁止访问（无权限访问）
 404	地址不存在
 405	客户端请求中的方法被禁止（一般是请求方式错误）
 500	服务器报错
 502	请求超时，无效网关
 503	服务器超载或者维护，无法响应
 
 
 3.前端安全
 
  3-1.XSS
 XSS(Cross Site Scripting)是跨站脚本攻击，为了区分CSS，所以缩写为XSS。XSS攻击方式是往Web页面插入恶意的 JavaScript 代码，当用户浏览网页的时候，
 插入的代码就是被执行，从而达到攻击的目的。

 其中应用比较多的一个就是，在网页一些公用的交互区域。比如搜索的文本框，除了可以输入一些关键字，还可以输入一些 JavaScript 代码，一旦代码点击搜索，
 代码就会被执行，达到攻击的目的。如下例
 <script>alert(document.cookie);</script>
 XSS防范

1.将重要的cookies标记为HTTP ONLY，让JavaScript代码无法调用，只有http能调用。或者将重要的信息保存在session里面。

2.只允许用户输入我们期望的数据。如消费金额框只能输入数字和小数点。

3.对数据进行加密处理。

4.过滤或者移除特殊的HTML标签，过滤JavaScript代码等。
4-2.CSRF

CSRF（Cross-site request forgery）是跨站请求伪造。XSS利用站点内的信任用户，与XSS不同，CSRF是通过伪装来自受信任用户，在受信任的网站进行请求，
盗取信息。其实就是攻击者盗用了受害者的身份，以受害者的名义向网站发送恶意请求。

CSRF的防御

1.在表单里增加Hash值，以认证这确实是用户发送的请求，然后在服务器端进行Hash值验证。

2.验证码：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串。

3.修改，增加重要信息，比如密码，个人信息的操作，尽量使用post。避免使用get把信息暴露在url上面。

 
 4.浏览器的渲染过程
 
 1.浏览器通过DNS对URL进行解析，找出对应的IP地址；

2.向IP地址发起网络请求，进行http协议会话：客户端发送报头（请求报头），服务端回馈报头（响应报头）

3.服务器根据请求，交给后台处理，处理完成后返回文件数据，浏览器接收文件数据（HTML、JS、CSS、图象等）；返回一个页面（根据页面上的外链的URL重新发
送请求获取）

4.浏览器接收文件完毕，对加载到的资源进行语法解析，以及相应的内部数据结构（网页渲染）


5.跨域解决方案

 解决方案

网上的针对跨域的解决方案有很多，大家参考着看就好。虽然罗列这么多，但是我只用过两种。
1、 jsonp

2、 document.domain + iframe

3、 location.hash + iframe

4、 window.name + iframe

5、 postMessage

6、 跨域资源共享（CORS）

7、 nginx代理

8、 nodejs中间件代理

9、 WebSocket协议



栈和堆的概念
栈(stack)会自动分配内存空间，会自动释放。堆(heap)动态分配的内存，大小不定也不会自动释放。

基本类型：Undefined、Null、Boolean、Number 和 String，这5中基本数据类型可以直接访问，他们是按照值进行分配的，存放在栈(stack)内存中的简单数据段
，数据大小确定，内存空间大小可以分配。

let a=1;

let b=a;

图片描述

如果修改了b

b=2;

图片描述

虽然b一开始是通过a赋值，但是a和b是独立的储存在栈内存里面，修改其中一个，不会对另一个有任何影响。

引用类型：即存放在堆(heap)内存中的对象，变量实际保存的是一个指针，这个指针指向另一个位置。

如下例子

let a={name:'守候'};

let b=a;

图片描述


如果修改了b

b.name='sh';

图片描述


b通过a赋值，a和b就共用了一个堆内存，修改了a或者b，都直接修改了堆内存的值，就会对另一个产生影响。


+ 操作符
var val = 'smtg';

console.log('Value is ' + (val === 'smtg') ? 'Something' : 'Nothing')

// something

var val = 'smtg';

console.log('Value is '  (val === 'smtg') ? 'Something' : 'Nothing')

// value is something
