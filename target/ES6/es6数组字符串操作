

1. 新增对数组的操作

// map: 用给定的映射遍历数组，不改变原数组，生成新数组；
let arr = [12, 58, 99, 86, 45, 21];
let newArr = arr.map(item=>item>=60?"及格":"不及格");
console.log(arr, newArr) // [12, 58, 99, 86, 45, 21] // ["不及格", "不及格", "及格", "及格", "不及格", "不及格"]

// filter: 过滤器
let filter = arr.filter(item=>item<=60);
console.log(filter); // [12, 58, 45, 21]

// reduce: 遍历累加
let sum = arr.reduce((item1, item2, index)=>item1+item2); // index表示下标，这里可不写
console.log(sum); //321

let arr2 = [
    {title: "奔驰", price: 20},
    {title: "宝马", price: 35},
    {title: "路虎", price: 30},
    {title: "特斯拉", price: 40},
    {title: "大众", price: 15},
    {title: "标致", price:15},
];
let filter2 = arr2.filter(item=>item.price >=30);
console.log(filter2)
//0: {title: "宝马", price: 35}1: {title: "路虎", price: 30}2: {title: "特斯拉", price: 40}


2. 字符串的操作
let str = "http://www.baidu.com";
if(str.startsWith("https")){
    console.log("加密网址");
}else if(str.startsWith("http")){
    console.log("普通网址");
}
// 普通网址

let str2 = "abc1234@163.com";
if(str2.endsWith("163.com")){
    console.log("163邮箱");
}else if(str2.endsWith("qq.com")){
    console.log("qq邮箱");
}
// 163邮箱


3. class 类的概念
class Person{
    constructor(name, gender){
        this.name = name;
        this.gender = gender;
    }
    showName(){
        console.log(this.name);
    }
    showGender(){
        console.log(this.gender);
    }
}

var sun = new Person("孙悟空", "male");
sun.showName();
sun.showGender();
// 孙悟空
// male

继承的概念
class Child extends Person{
    constructor(name, gender, age){
        super(name, gender);
        this.age = age;
    }
    showAge(){
        console.log(this.age);
    }
}

var child = new Child("小猴子", "male", 12);
child.showAge();
// 12

4.generator惰性函数
function *show() {
    console.log("------1-----");
    let a = yield 12;
    console.log("------2-----");
    console.log(a);
    return a;
}

let gen = show();
let a = gen.next(123);  // 当yield 后赋值时，第一次执行到yield时返回该值
let b = gen.next(456);
console.log(a, b); // a是一个json对象

 eg:
 function* g() {
    yield 'a';
    yield 'b';
    yield 'c';
    return 'ending';
}

var gen = g();
gen.next(); // {value: "a", done: false}
var gen = g();
var gen = g();//{value: "b", done: false}

function* g() {
    var o = 1;
    yield o++;
    yield o++;
    yield o++;

}
var geng = g();

console.log(geng.next()); // {value: 1, done: false}
var xxx = g();
console.log(geng.next()); // {value: 2, done: false}
console.log(xxx.next());  // {value: 1, done: false}
console.log(geng.next()); // {value: 3, done: false}


7. 数组去重
    1.) es6新增方法去重
let arr = [1, 2, 3, 2, 1];

function unique(arr){
    return Array.from(new Set(arr));
}
console.log(unique(arr))   // [1, 2, 3]

在这里分享另外一种去重的方法 
 2.) reduce方法去重
var arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];
	var result = arr.sort().reduce((init, current)=>{
	    if(init.length===0 || init[init.length-1]!==current){
	        init.push(current);
	    }
	    return init;
	}, []);
	console.log(result);//1,2,3,4,5
 
 
 8. 类型检验检测
 Object.prototype.toString.call()
  这是目前检测最为标准的检测方法。typeof等等的都只是初步检测
