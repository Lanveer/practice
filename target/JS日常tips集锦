
1. js的== 和===的区别 
var a = [0];
if ([0]) {
  console.log(a == true);
} else {
  console.log("wut");
}

[]==[]
答案：false, false
解析：[0]==true  //false   [0]===true  //false   [0]==false // true   [0]===false  // false
Boolean([0]) //true
1、如果两个值类型相同，进行 === 比较，比较规则同上 
2、如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较： 
a、如果一个是null、一个是undefined，那么[相等]。 
b、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。 
c、如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。 
d、如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。js核心内置类，
会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。非js核心的对象，令说（比较麻烦，我也不大懂） 
e、任何其他组合（array数组等），都不相等。

所以其实”==“的转换规则，并没有想象的那么简单，由此可见[0] == true, 应该采用的是规则c, 而[] == [] 应该采用的是规则e.

2. String('A') 和 new String('A') 的区别

function showCase(value) {
    switch(value) {
    case 'A':
        console.log('Case A');
        break;
    case 'B':
        console.log('Case B');
        break;
    case undefined:
        console.log('undefined');
        break;
    default:
        console.log('Do not know!');
    }
}

showCase(new String('A'));

function showCase2(value) {
    switch(value) {
    case 'A':
        console.log('Case A');
        break;
    case 'B':
        console.log('Case B');
        break;
    case undefined:
        console.log('undefined');
        break;
    default:
        console.log('Do not know!');
    }
}
showCase2(String('A'));
答案：‘Do not know!' ; 'Case A'

解析：为什么两个代码段的输出不一致呢？

两个原因：1.switch进行比较的时候用的是全等符“===”，所以不会做类型转换，即“10”不会等于10；

2. new String() 和 String 返回的类型不同，前者返回的是object，后者返回的是string，所以在做全等比较的时候，返回的结果是false。

所以如果有需要用到switch对于字符串做比较的时候，需要注意传入的参数类型。


3.比较符号
[1 < 2 < 3, 3 < 2 < 1]
答案： true, true

解析：1<2<3 等价于1<2=> true; true<3 => 1<3=> true;

3<2=> false; false<1 => 0<1=> true.

4.变量提升
(function(){
  var x = y = 1;
})();
console.log(y);  //1
console.log(x);  // error

5. JSon的操作方式
JSON.stringify()和JSON.parse()的区别
JSON.stringify()此方法用于将一个对象解析成字符串并返回。
JSON.parse()此方法刚好相反是将一个字符串对象解析成一个JSON对象。

6. 隐藏姓名中的几个字段以及电话号码*号表示
function hidden(str,frontLen,endLen) { 
                     var len = str.length-frontLen-endLen;
                     var xing = '';
                     for (var i=0;i<len;i++) {
                     xing+='*';
                    }
                     return str.substring(0,frontLen)+xing+str.substring(str.length-endLen);
               }

hidden('18200407614',3,3)
// "182*****614"

解析：

var str='18200407614'
var a=str.substring(0,3);
console.log(a) //182 表示从0开始截取三位数


var str='18200407614'
var a=str.substring(8);
console.log(a)// 614 表示从第8位开始到最后的数

7. js的精度运算
//加   
function floatAdd(arg1,arg2){   
     var r1,r2,m;   
     try{r1=arg1.toString().split(".")[1].length}catch(e){r1=0}   
     try{r2=arg2.toString().split(".")[1].length}catch(e){r2=0}   
     m=Math.pow(10,Math.max(r1,r2));   
     return (arg1*m+arg2*m)/m;   
}   
       
//减   
function floatSub(arg1,arg2){   
    var r1,r2,m,n;   
    try{r1=arg1.toString().split(".")[1].length}catch(e){r1=0}   
    try{r2=arg2.toString().split(".")[1].length}catch(e){r2=0}   
    m=Math.pow(10,Math.max(r1,r2));   
    //动态控制精度长度   
    n=(r1>=r2)?r1:r2;   
    return ((arg1*m-arg2*m)/m).toFixed(n);   
}   
        
//乘   
function floatMul(arg1,arg2)   {    
    var m=0,s1=arg1.toString(),s2=arg2.toString();    
    try{m+=s1.split(".")[1].length}catch(e){}    
    try{m+=s2.split(".")[1].length}catch(e){}    
    return Number(s1.replace(".",""))*Number(s2.replace(".",""))/Math.pow(10,m);    
}    
       
       
//除  
function floatDiv(arg1,arg2){    
      var t1=0,t2=0,r1,r2;    
      try{t1=arg1.toString().split(".")[1].length}catch(e){}    
      try{t2=arg2.toString().split(".")[1].length}catch(e){}    
         
      r1=Number(arg1.toString().replace(".","")); 
    
      r2=Number(arg2.toString().replace(".",""));    
      return (r1/r2)*Math.pow(10,t2-t1);    
} 



