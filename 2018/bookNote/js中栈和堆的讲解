
栈和堆是怎么产生的？

 当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。
 因此，所有在方法中定义的变量都是放在栈内存中的，但是声明在函数体之外的变量便存放在堆内存里面，不会随着函数的执行而被销毁，所以也不会被垃圾回收机制
 所回收。只有等到最后检验的时候，发现这个变量没有什么地方在引用的时候才会被销毁。
 
 
 堆和栈的执行：
 堆：队列优先,先进先出；由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
 栈：先进后出；动态分配的空间 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。


通过栈和堆印出来的深拷贝和浅拷贝

浅拷贝：基本类型拷贝的时候只是在内存中又开辟了新的空间，和它的父元素（再次我们称被拷贝的对象为父元素）属于 互不想干的东西，因此深浅拷贝是相对于引用类型的

代码：

var father1 = {name:'shangdi',age:1000,job:['teacher','cook']};
//浅拷贝函数
function copy(obj){
    var childs = {};
    for(var key in obj){
        childs[key] = obj[key];
    }
    return childs;
}
var child1 = copy(father1);
console.log(child1);    //{ name: 'shangdi', age: 1000 }
console.log(typeof child1); //object

//改变子对象的name属性，发现对父对象的name没有影响 哈哈！
child1.name = 'bangbang';
console.log(father1);   //{ name: 'shangdi', age: 1000 }
console.log(child1);    //{ name: 'bangbang', age: 1000 }

//注意：这次改变子对象的job属性也就是改变数组,
//发现对父对象的job竟然有影响,吓死宝宝了，那怎么办呢,那这个copy有什么用呢是吧！
child1.job.push('programer');
console.log(father1);   //{ name: 'shangdi',age: 1000,job: [ 'teacher', 'cook', 'programer' ] }
console.log(child1);    //{ name: 'shangdi',age: 1000,job: [ 'teacher', 'cook', 'programer' ] }



