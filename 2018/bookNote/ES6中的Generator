
1,概念
Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同

执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 
函数内部的每一个状态

形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield语句，定义不同的内部状态
（yield在英语里的意思就是“产出”）


function* create(){  
    yield '1';  
    yield '2';  
    return 'over';  
}  
var n = create();  
//Generator函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号  
  
//不同的是，调用Generator函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象  
//必须调用遍历器对象的next方法，使得指针移向下一个状态  
//也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield语句（或return语句）为止  
//Generator函数是分段执行的，yield语句是暂停执行的标记，而next方法可以恢复执行  
  
console.log(n.next());//Object {value: "1", done: false}  
console.log(n.next());//Object {value: "2", done: false}  
console.log(n.next());//Object {value: "over", done: true}  
console.log(n.next());//Object {value: undefined, done: true}  
  
//第三次调用，Generator函数从上次yield语句停下的地方，一直执行到return语句（如果没有return语句，就执行到函数结束）。  
//next方法返回的对象的value属性，就是紧跟在return语句后面的表达式的值（如果没有return语句，则value属性的值为undefined），  
//done属性的值true，表示遍历已经结束。 


function* foo(){  
    yield 'a';  
    yield 'b';  
}  
function* bar(){  
    yield 'x';  
    foo();  
    yield 'y';  
}  
for(let i of bar()){  
    console.log(i);  
}  
//x  
//y  
//上面代码中，foo和bar都是 Generator 函数，在bar里面调用foo，是不会有效果的。 



function* foo(){  
    yield 'a';  
    yield 'b';  
}  
function* bar(){  
    yield 'x';  
    yield* foo() ;  
    yield 'y';  
}  
for(let i of bar()){  
    console.log(i);  
}  
//x  
//a  
//b  
//y  
//从语法角度看，如果yield命令后面跟的是一个遍历器对象，需要在yield命令后面加上星号，  
//表明它返回的是一个遍历器对象。这被称为yield*语句。 
