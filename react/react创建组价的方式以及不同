
 1  无动态式的函数式组件创建
 
 function HelloComponent(props, /* context */) {
  return <div>Hello {props.name}</div>
}
ReactDOM.render(<HelloComponent name="Sebastian" />, mountNode) 

特点：
1.组件不会被实例化，整体渲染性能得到提升
2.因为组件被精简成一个render方法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无实例化过程也就不需要分配多余的内存，
从而性能得到一定的提升。
3.组件不能访问this对象
无状态组件由于没有实例化过程，所以无法访问组件this中的对象，例如：this.ref、this.state等均不能访问。若想访问就不能使用这种形式来创建组件
4.组件无法访问生命周期的方法
因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以无状态组件是不能参与组件的各个生命周期管理的。
无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用


2. ES5方式创建
 React.CreateClass({
 
 defaultProps:{
 name:'zhangsan ';
 }
 
 render : function(){
 return (
 <div></div>
 )
 }
 })
 
 
 3. 
