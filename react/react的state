
react 的核心思想是组件化的思想， 整个的应用都是由组件搭建而成的，而所有组件中最重要的概念是state（状态），这个状态规定了当前组件的一个身份和状态，是该显示
还是该隐藏。state是一个组件的UI数据模型。也是组件在渲染时的数据依据。


组件中用到的一个变量是不是应该作为组件State，可以通过下面的4条依据进行判断：

1.这个变量是否是通过Props从父组件中获取？如果是，那么它不是一个状态。
2.这个变量是否在组件的整个生命周期中都保持不变？如果是，那么它不是一个状态。
3.这个变量是否可以通过其他状态（State）或者属性(Props)计算得到？如果是，那么它不是一个状态。
4.这个变量是否在组件的render方法中使用？如果不是，那么它不是一个状态。这种情况下，这个变量更适合定义为组件的一个普通属性，例如组件中用到的定时器，就应该直接定义为this.timer，而不是this.state.timer。
注意：请务必牢记，并不是组件中用到的所有变量都是组件的状态！当存在多个组件共同依赖一个状态时，一般的做法是状态上移，将这个状态放到这几个组件的公共父组件中。

  
  
  如何修改state值
  
  1.不能直接修改State。
   直接修改state，组件并不会重新重发render。例如：
   
  this.state.title='react' 这是错误的修改state的方法
  this.setState({title:'react'}) 这才是正确的修改state的方法。
  
  
  2. State 的更新是异步的。
  
  当触发修改state之后并不会立即执行修改后的，而是出于性能方面的考虑，将多次的state改变集中在一起来执行。
  
  当在购买的时候，连续点击两次+ 相当于是添加了两个商品。
  this.setState({quantity: this.state.quantity + 1})，
  在React合并多次修改为一次的情况下，相当于等价执行了如下代码：

  Object.assign(
    previousState,
    {quantity: this.state.quantity + 1},
    {quantity: this.state.quantity + 1}
  )
 
  这样的话，只会执行最后一次，而不是执行总共的两次，也就会产生点击两次却只有一次被执行了。
  
  
  解决方法： 使用一个函数来接受两个参数
  this.setState((preState, props) => ({
  counter: preState.quantity + 1; 
}))


这个函数有两个参数，第一个是当前最新状态（本次组件状态修改后的状态）的前一个状态preState（本次组件状态修改前的状态），第二个参数是当前最新的属性props




  
  
